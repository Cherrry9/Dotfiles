#+TITLE: Emacs Configuration
#+AUTHOR: cherrry9
#+EMAIL: cherrry9@disroot.org

* Introduction

My emacs configuration written in org mode. When Emacs is booted, all the
source blocks from this file are used to generate the configuration file.

* Basic Interface Settings
** Looks
*** Disable GUI elements

Plebs mode off.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC

*** Startup screen

We use an actual replacement for it, keep reading or head directly to dashboard.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

*** Dashboard

This is your new startup screen, together with projectile it works in unison and
provides you with a quick look into your latest projects and files. Change the
welcome message to whatever string you want and change the numbers to suit your
liking, I find 5 to be enough.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    ;; (setq dashboard-items '((recents  . 5)
    ;;                         (projects . 5)))
    (setq dashboard-startup-banner 'logo))
#+END_SRC

*** Disable cursor blinking

It is incredibly annoying.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

*** Show line numbers

Faster relative jumps with C-u n C-n/p.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook '(lambda () (display-line-numbers-mode 1)))
  (setq display-line-numbers-type (quote relative))
#+END_SRC

*** Disable bell

This is annoying, remove this line if you like being visually reminded of events.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Highlight Current Line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

*** Identation

Disable tabs and sets <TAB> to 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Functionality
*** Async

Lets us use asynchronous processes wherever possible, pretty useful.

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1)
    (async-bytecomp-package-mode 1))
#+END_SRC

*** Set the folder for backups and autosaves

This feature is super useful sometimes, but it kills me to swarm my projects
with =foo~= and =#foo#= files. That's why I set them to one directory and stop them
from polluting everywhere.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t
        version-control t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        auto-save-file-name-transforms `((".*" "~/.emacs.d/saves/" t)))

  (make-directory "~/.emacs.d/autosaves/" t)
  (make-directory "~/.emacs.d/backup/" t)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Disabl1e the warning when killing a buffer with process

When a buffer (i.e =something.py=) has an associated process (in that case,
=Python= for completion), Emacs will prompt you when trying to kill it, asking
for confirmation. I think it just interferes in my way, so I disable it as well.

#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))
#+END_SRC

*** Kill buffers without asking for confirmation

Unless you have the muscle memory, I recommend omitting this bit, as you may
lose progress for no reason when working.

#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions (delq
  'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC

*** Smooth scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

*** Set UTF-8 encoding

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Scroll in the compilation buffer

It is really annoying to not have the last part of the output in the screen
when compiling. This automatically scrolls the buffer for you as the output is
printed.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

*** Always follow symlinks

When opening a file, always follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

*** Auto revert files on change

When something changes a file, automatically refresh the buffer containing that
file so they can’t get out of sync.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

* Text manipulation
** Electric

If you write any code, you may enjoy this. Typing the first character in a set
of 2, completes the second one after your cursor. Opening a bracket? It’s closed
for you already. Quoting something? It’s closed for you already.

You can easily add and remove pairs yourself, have a look.

#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\{ . ?\})
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             ))
#+END_SRC

And now to enable it

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

** Show parens
   
Highlights matching parens when the cursor is just behind one of them.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Rainbow delimiters

Colors parentheses and other delimiters depending on their depth, useful for any
language using them, especially lisp.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Subwords

Emacs treats camelCase strings as a single word by default, this changes said
behaviour.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Redefining sentences

Emacs allows you to move in sentences using the commands =M-a= and =M-e= (to go
to the beginning or the end of the sentence). This is super useful for editing
text, but Emacs assumes that you always end sentences using a period and /two/
whitespaces, which... I actually don't. We can override this behavior with:

#+BEGIN_SRC emacs-lisp
  (setq-default sentence-end-double-space nil)
#+END_SRC

** Auto fill mode

I truly believe that code and other text files have to respect a 80 characters
per line bound. No, 120 is not enough. Of course, for me =org-mode= should also
be, so we enable this behaviour to be automatic. Also, keep in mind that Emacs
auto fills to 70 characters, so we have to manually set the 80 limit.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq-default fill-column 80)
#+END_SRC

** Auto fill comments

For our comments (only comments, not code) to be automatically filled in
programming modes, we can use this function:

#+BEGIN_SRC emacs-lisp
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (add-hook 'prog-mode-hook 'comment-auto-fill)
#+END_SRC

** Rainbow

Mostly useful if you are into web development or game development. Every time
emacs encounters a hexadecimal code that resembles a color, it will
automatically highlight it in the appropriate color. This is a lot cooler than
you may think.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

* Moving around Emacs
** Replace =list-buffers= with =ibuffer=

I don’t understand how ibuffer isn’t the default option by now. It’s vastly
superior in terms of ergonomics and functionality, you can delete buffers,
rename buffer, move buffers, organize buffers etc.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

**** expert-mode

If you feel like you know how ibuffer works and need not to be asked for
confirmation after every serious command, enable this as follows.

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** Evil

Vim + Emacs = <3

#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-keybinding nil)
      :config
      (evil-mode 0))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

** swiper

I like me some searching, the default search is very meh. In emacs, you mostly
use search to get around your buffer, much like with avy, but sometimes it
doesn’t hurt to search for entire words or mode, swiper makes sure this is more
efficient.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC

** ivy

Generic completion frontend for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-count-format "%d/%d ")
    :bind
    ("C-c C-r" . ivy-resume)
    ("M-x" . counsel-M-x))
#+END_SRC

** which-key

In order to use emacs, you don't need to know how to use emacs.
It's self documenting, and coupled with this insanely useful package, it's even easier.
In short, after you start the input of a command and stop, pondering what key must follow,
it will automatically open a non-intrusive buffer at the bottom of the screen offering
you suggestions for completing the command, that's it, nothing else.

It's beautiful

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
      (which-key-mode))
#+END_SRC

* Org

The greatest feature of Emacs.

** Common settings

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init
    (setq org-ellipsis " ")
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-src-window-setup 'current-window)
    (add-hook 'org-mode-hook 'org-indent-mode))
#+END_SRC

** Org Bullets

Makes it all look a bit nicer, I hate looking at asterisks.

#+BEGIN_SRC  emacs-lisp
  (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Export documents to html

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
          :ensure t)
#+END_SRC

* Programming
** Flycheck

On-the-fly syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    :bind
    ("M-n" . flycheck-next-error)
    ("M-p" . flycheck-previous-error))
#+END_SRC

** Company

I set the delay for company mode to kick in to half a second, I also make sure that
it starts doing its magic after typing in only 2 characters.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "C-SPC") #'company-abort))
#+END_SRC

** Lsp

Emacs client for lsp.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((prog-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration)))

  (use-package company-lsp
    :ensure t)

  (use-package lsp-ui
    :ensure t)

  (use-package lsp-ivy
    :ensure t)

  (use-package lsp-treemacs
    :ensure t)

  (use-package dap-mode
    :ensure t)
#+END_SRC

