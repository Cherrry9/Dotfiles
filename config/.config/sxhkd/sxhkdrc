#            _     _       _
#   _____  _| |__ | | ____| |
#  / __\ \/ / '_ \| |/ / _` |
#  \__ \>  <| | | |   < (_| |
#  |___/_/\_\_| |_|_|\_\__,_|

# STATE/FLAGS {{
# tiled - floating
super + t
	bspc query --nodes -n focused.tiled && state=floating || state=tiled; \
	bspc node --state \~$state
# tiled - pseudo_tiled
super + p
	bspc node --state \~pseudo_tiled
# tiled - fullscreen
super + f
	bspc node --state \~fullscreen

# flags
super + {m,x,s,z}
	bspc node -g {marked,locked,sticky,private}

~button1
	bspc node -l above

# }}

# MOVE {{
# focus/swap the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus/swap the last node/desktop
super + {grave,shift + grave,apostrophe}
	bspc {node -f last.local,desktop -f last,node --swap last}

# focus or send to the given desktop
super + {_,shift +}g
	bspc node {-f,-s} biggest.local

# move a floating window
alt + shift + {h,j,k,l}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# focus the next/previous node in the current desktop
super + {_,shift + }n
	bspc node -f {next,prev}.local

# Move window to other monitor
ctrl + shift + {h,l}
    bspc node --to-desktop {prev,next} --focus

# top left
alt + ctrl + k
    preset 'top-left'

# bottom left
alt + ctrl + j
    preset 'bottom-left'

# vertical right
alt + ctrl + l
    preset 'vertical-right'

# wide vertical left
alt + ctrl + h
    preset 'wide-vertical-left'

# center
alt + ctrl + s
    preset 'center'

# }}

# RESIZE {{
# expand a window by moving one of its side outward
ctrl + super + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
ctrl + super + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# Resize gaps
ctrl + alt + g: {k,j}
      bspc config -d focused window_gap "$(($(bspc config -d focused window_gap) {-,+} 5 ))"

# }}

# DESKTOP {{
# Focus next/previous desktop
super + {_,shift + }Tab
	bspc desktop --focus {next,prev}.occupied

# Move/send window to selected desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

# Move window to selected desktop
alt + shift + {1-9,0}
	bspc node --to-desktop ^{1-9,10} --focus

# }}

# LAYOUTS {{
# Flip layout vertically/horizontally
super + {v,b}
	bspc node @/ --flip {vertical,horizontal}

# rotate windows
super + {_,shift +} r
   bspc node @/ -R {90,270}

# Circulate the leaves of the tree
super + {_,shift + } c
	bspc node @/ --circulate {forward,backward}

# Navigate layouts
super + {_,shift + }space
	bspc desktop --layout {next,prev}

# Make split ratios equal/balanced
super + ctrl + {minus,equal}
	bspc node @/ {--equalize,--balance}

# }}

# PRESELECTION {{
# New split
alt + {h,j,k,l}
	bspc node -p {west,south,north,east}
super + alt + {p,b,comma,period}
	bspc node --focus @{parent,brother,first,second}
# Cancel preselection
alt + {_,shift +} e
	{bspc node -p cancel,bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel}

# }}

# HIDEN {{
# scratchpad
super + F1
 	id=$(head -1 /tmp/scratchid);\
 	bspc node $id --flag hidden;bspc node -f $id

# un/hide currently active window
super + {_,shift} + u
    toggle {hide,show}

# hiden windows
super + shift + w
	dmenuhidden
super + w
	bspc node -g sticky; bspc node -g hidden

# }}

# APPLICATION {{
# Kill window
super + {_,shift + }q
	bspc node -{c,k}

# Open
super + d
	j4-dmenu-desktop
super + Return
	$TERMINAL
super + shift + Return
	$TERMINAL -e $FILE
alt + n
	$TERMINAL -e nmtui
alt + shift + w
	$BROWSER
alt + m
	$TERMINAL -e ncmpcpp
alt + v
	$TERMINAL -e nvim
alt + a
	$TERMINAL -e alsamixer
alt + e
	$TERMINAL -e neomutt

# }}

# SCRIPTS {{
super + ctrl + slash
	dmenumpd
super + ctrl + o
	dmenunewtab
super + ctrl + p
	passmenu
super + ctrl + e
	dmenuedit
super + ctrl + i
	dmenuunicode
super + ctrl + t
	dmenutmux
super + ctrl + Delete
	dmenureload
super + ctrl + m
	dmenupower
super + End
	dmenuscreen
super + Insert
	dmenurecord
super + End
	dmenurecord kill; notify-send "Recording finished"
super + ctrl + d
	ANS="$(printf "mount\numount" | dmenu -p 'Device')"; case "$ANS" in; mount) dmenumount;; umount) dmenuumount; esac

alt + slash
	notify-send \
	"$(date "+%a %d %b - %I:%M %p")" \
	"Desktop: $(bspc query -D -d focused --names)\n\
	Volume: $(amixer -D pulse get Master | grep -o '[0-9][0-9]*%' | head -1)\n\
	$(acpi)"
super + ctrl + Insert
	showclip
super + ctrl + x
	prompt "Lock screen" "slock & mpc pause"
super + ctrl + q
	prompt "Shutdown computer?" "shutdown -h now"
super + ctrl + BackSpace
	prompt "Reboot computer?" "reboot"
super + Escape
	prompt 'Leave Xorg?' 'killall Xorg'
super + ctrl + u
	prompt "Update packages?" "update"

# }}

# BACKLIGHT / VOLUME {{
# Volume
super + {equal,shift + plus}
	{amixer sset Master 5%+,mpc volume +5}
super {_,shift} + minus
	{amixer sset Master 5%-,mpc volume -5}

# Mute
super + shift + m
	amixer sset Master toggle

# backlight
alt + {_,shift +} equal
	{xbacklight -inc 15, sudo -A keybacklight -inc}
alt  + {_,shift +} minus
	{xbacklight -dec 15, sudo -A keybacklight -dec}
{XF86MonBrightnessDown,XF86MonBrightnessUp}
	{xbacklight -dec 15,xbacklight -inc 15}

# }}

# MPD {{
# Pause audio
super + shift + p
	mpc toggle
# Changes to next/previous tracks
super + {comma,period}
	mpc {prev; dunstify "$(mpc current)",next; dunstify "$(mpc current)"}
# Restart track
super + shift + less
	mpc seek 0%
# Seek foward in song
super + {_,shift +} bracketright
	mpc seek +{10,120}
# Seek backward in song
super + {_,shift +} bracketleft
	mpc seek -{10,120}

# }}

# MEDIA KEYS {{
# Audiokeys
XF86AudioMute
	amixer sset Master toggle
XF86Audio{Raise,Lower}Volume
	amixer sset Master 5%{+,-}
XF86Audio{Next,Prev}
	mpc {next,prev}
XF86Audio{Pause,Play,Stop}
	mpc {pause,play,stop}
XF86Audio{Rewind,Forward}
	mpc seek {-,+}10
XF86AudioMedia
	$TERMINAL -e ncmpcpp

# }}

# vim: set foldmarker={{,}} foldlevel=0 foldmethod=marker nospell:
